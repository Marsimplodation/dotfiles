#!/bin/bash
# Check if fzf is installed
if ! command -v fzf &> /dev/null; then
    echo "Error: fzf is not installed. Please install it first."
    exit 1
fi

dirs=("uni" ".config" "bin" "projects")

# Initialize projects variable
projects=""

# Iterate through the specified directories
for root in "${dirs[@]}"; do
    # Check if the root directory exists
    if [ -d "$HOME/$root" ]; then
        # Iterate through subdirectories
        for dir in "$HOME/$root"/*; do
            # Check if it's a directory and not empty
            if [ -d "$dir" ]; then
                # Iterate through subdirectories of subdirectories
                for subDir in "$dir"/*; do
                    if [ -d "$subDir" ]; then
                        projects="$projects
$subDir"
                    fi
                done
            projects="$projects
$dir"
            fi
        done
    projects="$projects
$HOME/$root"
    fi
done

ppath=$(echo "$projects" | fzf --prompt="Select project: " --border --delimiter='\n')
cd $ppath
name=$(basename "$ppath")

# Check if the session already exists
tmux has-session -t $name 2>/dev/null

if [ $? != 0 ]; then
# Create a new Tmux session named "my_session"
tmux new-session -d -s "$name" -c $ppath

# Rename the first window to 'nvim' and start Neovim
tmux rename-window -t "$name":0 'nvim'
tmux send-keys -t "$name":0 'nvim' C-m

# Create a second window and rename it to 'shell'
tmux new-window -t "$name":1 -n 'shell' -c $ppath

tmux select-window -t $name:0
fi

# Source the .tmux.conf file
tmux source-file ~/.tmux.conf

# Attach to the session
tmux attach-session -t "$name"
